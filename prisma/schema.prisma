// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  admin
  examiner
  examinee
}

enum QuestionType {
  shortAnswer
  multiChoice
  multiSelect
  ordering
  filling
}

enum Difficulty {
  easy
  normal
  hard
}

model User {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @default(now()) @updatedAt
  email        String      @unique
  passwordHash String
  roles        UserRoles[] @default([])
  firstName    String
  lastName     String
  gender       String
  dateOfBirth  DateTime
  questions    Question[]
  tests        Test[]

  @@map("users")
}

model Question {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  testIds        String[]     @db.ObjectId
  tests          Test[]       @relation(fields: [testIds], references: [id])
  type           QuestionType
  difficulty     Difficulty   @default(normal)
  categories     String[]     @default([])
  content        String
  answer         String?
  choices        String[]     @default([])
  correctChoice  String?
  correctChoices String[]     @default([])
  orders         String[]     @default([])
  fills          String[]     @default([])
  imageFilename  String?
  audioFilename  String?
  videoFilename  String?
  isPublic       Boolean

  @@map("questions")
}

model Test {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @default(now()) @updatedAt
  userId        String     @unique @db.ObjectId
  user          User       @relation(fields: [userId], references: [id])
  name          String
  startDateTime DateTime
  endDateTime   DateTime
  duration      Int
  questionIds   String[]   @db.ObjectId
  questions     Question[] @relation(fields: [questionIds], references: [id])

  @@map("tests")
}
