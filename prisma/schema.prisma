// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRoles {
  admin
  examiner
  examinee
}

enum QuestionType {
  shortAnswer
  openedAnswer
  multiChoice
  multiSelect
  ordering
  filling
}

enum Difficulty {
  easy
  medium
  hard
}

enum ResultState {
  notStarted
  inProgress
  completed
}

enum TestState {
  opened
  closed
}

model User {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @default(now()) @updatedAt
  email        String       @unique
  passwordHash String
  roles        UserRoles[]  @default([])
  firstName    String
  lastName     String
  gender       String
  dateOfBirth  DateTime
  questions    Question[]
  tests        Test[]
  results      Result[]

  @@map("users")
}

model Question {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @default(now()) @updatedAt
  userId         String       @db.ObjectId
  user           User         @relation(fields: [userId], references: [id])
  testIds        String[]     @db.ObjectId
  tests          Test[]       @relation(fields: [testIds], references: [id])
  type           QuestionType
  difficulty     Difficulty   @default(easy)
  categories     String[]     @default([])
  content        String
  answer         String?
  choices        String[]     @default([])
  correctChoice  String?
  correctChoices String[]     @default([])
  orders         String[]     @default([])
  fills          String[]     @default([])
  imageFilename  String?
  audioFilename  String?
  videoFilename  String?
  isPublic       Boolean
  TestAnswer     TestAnswer[]

  @@map("questions")
}

model Test {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now()) @updatedAt
  userId        String       @db.ObjectId
  user          User         @relation(fields: [userId], references: [id])
  name          String
  startDateTime DateTime
  endDateTime   DateTime
  duration      Int
  questionIds   String[]     @db.ObjectId
  questions     Question[]   @relation(fields: [questionIds], references: [id])
  maxScore      Int          @default(0)
  results       Result[]
  state         TestState    @default(closed)

  @@map("tests")
}

model Result {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now()) @updatedAt
  userId     String       @db.ObjectId
  user       User         @relation(fields: [userId], references: [id])
  testId     String       @db.ObjectId
  test       Test         @relation(fields: [testId], references: [id])
  score      Int          @default(0)
  state      ResultState  @default(notStarted)
  testAnswer TestAnswer[]

  @@map("results")
}

model TestAnswer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  resultId   String   @db.ObjectId
  result     Result   @relation(fields: [resultId], references: [id])
  answer     String?
  choice     String?
  choices    String[] @default([])
  isCorrect  Boolean  @default(false)

  @@map("testAnswers")
}
